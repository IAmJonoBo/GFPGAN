name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (ruff)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Run ruff
        run: |
          uv run --no-project --with ruff ruff check .

  typecheck:
    name: Typecheck (pyright)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Run pyright
        run: |
          uv run --no-project --with pyright pyright

  tests-light:
    name: Tests (light)
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Run tests_light
        run: |
          uv run --no-project --with pytest --with numpy python -m pytest -q tests_light

  docs:
    name: Docs build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Build docs
        run: |
          uv run --no-project --with mkdocs --with mkdocs-material --with mike mkdocs build --clean

  link-check:
    name: Link check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lychee link check
        uses: lycheeverse/lychee-action@v2
        with:
          args: --no-progress --exclude-mail --accept 200,403,429 --max-redirects 5 --timeout 20s './**/*.md'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tests-heavy:
    name: Tests (heavy)
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    timeout-minutes: 60
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Optional extras, best-effort
          pip install '.[metrics,arcface,codeformer,restoreformerpp]'
          pip install pytest
      - name: Run tests
        env:
          GFPP_NO_DEPRECATION: '1'
        run: |
          pytest -q tests
          pytest -q tests_light

  build-verify:
    name: Build and verify
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Build sdist+wheel and twine check
        run: |
          uv run --no-project --with build --with twine python -m build
          uv run --no-project --with twine twine check dist/*

  windows-smoke:
    name: Windows CLI smoke
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install minimal runtime
        run: |
          python -m pip install --upgrade pip
          pip install .
      - name: Smoke test CLI
        shell: bash
        run: |
          restoria --help >/dev/null 2>&1 || python -m restoria.cli.main --help
          python - << 'PY'
          import os, tempfile, json, pathlib
          from restoria.cli.run import run_cmd
          d = tempfile.mkdtemp()
          src = os.path.join(d, 'in.png')
          pathlib.Path(src).write_bytes(b'')
          out = os.path.join(d, 'out')
          code = run_cmd(['--input', src, '--output', out, '--backend', 'gfpgan', '--dry-run'])
          assert code == 0
          assert os.path.exists(os.path.join(out, 'manifest.json'))
          print('OK')
          PY
