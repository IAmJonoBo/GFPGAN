name: CI

on:
  push:
    branches: [ main, master, 'docs/**' ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11" ]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            pyproject.toml

      - name: Install tools
        run: pip install --disable-pip-version-check --no-input ruff black

      - name: Lint (ruff)
        run: ruff check .

      - name: Format check (black)
        run: black --check .

      - name: Smoke import
        run: |
          python - <<'PY'
          import importlib
          import sys
          try:
              importlib.import_module('gfpgan')
          except Exception as e:
              # Do not fail CI while tests stabilize
              print(f"Import warning: {e}", file=sys.stderr)
          PY

  smoke:
    name: smoke (3.11)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Syntax check (compileall)
        run: |
          python -m compileall -q gfpgan scripts inference_gfpgan.py || exit 1

  links:
    name: links
    runs-on: ubuntu-latest
    steps:
      - name: Check Colab notebook link
        run: |
          URL="https://colab.research.google.com/github/IAmJonoBo/GFPGAN/blob/main/notebooks/GFPGAN_Colab.ipynb"
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
          echo "Colab URL status: $code"
          [ "$code" -eq 200 ]

  model-links:
    name: model links
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check model URLs
        run: |
          set -euo pipefail
          urls=(
            "https://github.com/TencentARC/GFPGAN/releases/download/v0.1.0/GFPGANv1.pth"
            "https://github.com/TencentARC/GFPGAN/releases/download/v0.2.0/GFPGANCleanv1-NoCE-C2.pth"
            "https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.3.pth"
            "https://github.com/TencentARC/GFPGAN/releases/download/v1.3.0/GFPGANv1.4.pth"
            "https://github.com/TencentARC/GFPGAN/releases/download/v1.3.4/RestoreFormer.pth"
            "https://github.com/xinntao/Real-ESRGAN/releases/download/v0.2.1/RealESRGAN_x2plus.pth"
          )
          for u in "${urls[@]}"; do
            code=$(curl -s -o /dev/null -w "%{http_code}" -L "$u")
            echo "$u -> $code"
            [ "$code" -ge 200 ] && [ "$code" -lt 400 ]
          done

  docs-check:
    name: docs (build)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            pyproject.toml
      - name: Build docs
        run: |
          python -m pip install --upgrade pip
          pip install -q mkdocs mkdocs-material
          mkdocs build --strict

  audit:
    name: security (pip-audit)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Run pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install -q pip-audit
          # Audit requirements first (runtime path)
          if [ -f requirements.txt ]; then pip-audit -r requirements.txt || true; fi
          # Audit the project install if possible (dev + torch track)
          pip install -e .[dev] || true
          pip-audit || true

  tests-light:
    name: tests (light)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            pyproject.toml
      - name: Install dependencies (runtime)
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Ensure core libs available for tests
          pip install -q torch torchvision opencv-python PyYAML || true
      - name: Install package (CPU)
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,torch2]
          # Ensure Basicsr master to match latest torchvision API
          pip uninstall -y basicsr || true
          pip install --no-cache-dir --force-reinstall --upgrade "git+https://github.com/xinntao/BasicSR@master"
      - name: Run light tests
        env:
          PYTEST_DISABLE_PLUGIN_AUTOLOAD: '1'
        run: pytest -q -c /dev/null tests_light

  nbmake:
    name: notebook (nbmake)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install notebook runtime (CPU)
        run: |
          python -m pip install --upgrade pip
          # Kernel + pytest plugin deps
          pip install -q ipykernel pytest nbmake
          # Minimal runtime deps for the notebook (CPU-only Torch wheels + headless OpenCV)
          pip install --index-url https://download.pytorch.org/whl/cpu torch torchvision torchaudio
          pip install -q opencv-python-headless pyyaml
          # Project in editable mode (no extras) so module imports succeed if needed
          pip install -q -e .
          # Ensure Basicsr master to match latest torchvision API
          pip uninstall -y basicsr || true
          pip install --no-cache-dir --force-reinstall "git+https://github.com/xinntao/BasicSR@master"
      - name: Register kernel (explicit)
        run: python -m ipykernel install --user --name python3
      - name: Run nbmake (smoke)
        env:
          NB_CI_SMOKE: '1'
          PYTEST_DISABLE_PLUGIN_AUTOLOAD: '1'
        run: |
          # Run only the Colab notebook as a test with a known kernel; skip heavy cells via NB_CI_SMOKE
          # Ignore tests/ during collection to avoid importing unit tests
          pytest --nbmake --nbmake-kernel=python3 --nbmake-timeout=600 --ignore=tests notebooks/GFPGAN_Colab.ipynb -q
