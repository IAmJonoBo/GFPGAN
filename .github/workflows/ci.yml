name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (ruff)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Run ruff
        run: |
          uv run --no-project --with ruff ruff check .

  typecheck:
    name: Typecheck (pyright)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Run pyright
        run: |
          uv run --no-project --with pyright pyright

  tests-light:
    name: Tests (light)
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Run tests_light
        run: |
          uv run --no-project --with pytest --with numpy python -m pytest -q tests_light

  docs:
    name: Docs build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Build docs
        run: |
          uv run --no-project --with mkdocs --with mkdocs-material --with mike mkdocs build --clean

  link-check:
    name: Link check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Lychee link check
        uses: lycheeverse/lychee-action@v2
        with:
          # Use repository .lychee.toml config to stabilize checks
          args: --no-progress --config .lychee.toml './**/*.md'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  tests-heavy:
    name: Tests (heavy)
    if: github.event_name == 'push' || github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    timeout-minutes: 60
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: pip
      - name: Install minimal deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Optional extras, best-effort
          pip install '.[metrics,arcface,codeformer,restoreformerpp]'
          pip install pytest
      - name: Run tests (emit JUnit)
        env:
          GFPP_NO_DEPRECATION: 1
        run: |
          mkdir -p junit
          pytest -q tests --junitxml=junit/tests.xml || true
          pytest -q tests_light --junitxml=junit/tests_light.xml || true
      - name: Compress JUnit reports
        run: |
          tar -czf junit.tar.gz junit
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: pytest-junit-heavy
          path: junit.tar.gz

  build-verify:
    name: Build and verify
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Build sdist+wheel and twine check
        run: |
          uv run --no-project --with build --with twine python -m build
          uv run --no-project --with twine twine check dist/*

  security-audit:
    name: Security audit (pip-audit)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Run pip-audit
        id: audit
        run: |
          set +e
          uv run --no-project --with pip-audit pip-audit -r requirements.txt -f json -o pip-audit.json || true
          test -f pip-audit.json || echo '{}' > pip-audit.json
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: pip-audit.json

  sbom:
    name: SBOM (CycloneDX)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Setup uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      - name: Generate SBOM
        run: |
          uv run --no-project --with cyclonedx-bom cyclonedx-py -e -o sbom.json || true
      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-cyclonedx
          path: sbom.json

  windows-smoke:
    name: Windows CLI smoke
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install minimal runtime
        run: |
          python -m pip install --upgrade pip
          # Install package without heavy dependencies (torch/opencv/etc.)
          pip install . --no-deps
      - name: Smoke test CLI
        shell: bash
        run: |
          restoria --help >/dev/null 2>&1 || python -m restoria.cli.main --help || true
          python - << 'PY'
          import os, tempfile, json, pathlib, base64, sys
          # Ensure src package is importable in editable install context
          sys.path.insert(0, os.getcwd())
          sys.path.insert(0, os.path.join(os.getcwd(), 'src'))
          from restoria.cli.run import run_cmd
          # Minimal valid 1x1 transparent PNG
          TINY_PNG = base64.b64decode(
            'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAASsJTYQAAAAASUVORK5CYII='
          )
          d = tempfile.mkdtemp()
          src = os.path.join(d, 'in.png')
          pathlib.Path(src).write_bytes(TINY_PNG)
          out = os.path.join(d, 'out')
          code = run_cmd(['--input', src, '--output', out, '--backend', 'gfpgan', '--dry-run'])
          assert code == 0
          assert os.path.exists(os.path.join(out, 'manifest.json'))
          assert os.path.exists(os.path.join(out, 'metrics.json'))
          print('OK')
          PY

  markdownlint:
    name: Markdown lint
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Run markdownlint-cli2
        uses: DavidAnson/markdownlint-cli2-action@v17
        with:
          globs: |
            **/*.md
